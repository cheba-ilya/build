#!groovy
// Run docker build
properties([disableConcurrentBuilds()])

pipeline {
    agent { 
        label 'master'
        }
  
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }
    
    stages {
        stage("docker login") {
            steps {
                echo " ============== docker login =================="
                withCredentials([usernamePassword(credentialsId: 'docker_ilya', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh """
                    docker login -u $USERNAME -p $PASSWORD
                    """
                }
            }
        }
        stage("create docker image") {
            steps {
                echo " ============== start building image =================="
                sh 'docker build -t cheba2011/neslojno:latest . '
                sh 'ls -l'
                }
        }
        stage("docker push") {
            steps {
                echo " ============== start pushing image =================="
                sh '''
                docker push cheba2011/neslojno:latest
                '''
            }
        }
       stage("teraform apply") {
           steps {
            withCredentials([[$class:'AmazonWebServicesCredentialsBinding',credentialsId:'credentials',accessKeyVariable:'AWS_ACCESS_KEY_ID',secretKeyVariable:'AWS_SECRET_ACCESS_KEY']]){
                echo " ============== teraform apply =================="
               
                sh 'terraform init'
                sh 'terraform apply -auto-approve'
                sh 'terraform output > output.txt'
                sh 'cut outputs.txt -d \' \' -f3 > cutted_ip.txt'
                sh '''  
                ssh -tt -o "StrictHostKeyChecking no" -i "/var/lib/jenkins/wordaaaa" ubuntu@$(cat cutted_ip.txt) 'pwd' 'sudo docker pull cheba2011/neslojno;sudo service docker restart;sudo docker run -d -p 80:80 cheba2011/neslojno'
                '''
                
                }
           }
        } 
    }
}
